# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class Object(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObject(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Object()
        x.Init(buf, n + offset)
        return x

    # Object
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Object
    def ObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Object
    def ObjectClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Object
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Object
    def ObjectTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .Pos import Pos
            obj = Pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Object
    def Hp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Object
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Object
    def ResourceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Object
    def ResourceAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Object
    def InfoType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Object
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ObjectStart(builder): builder.StartObject(11)
def ObjectAddObjectId(builder, objectId): builder.PrependUint32Slot(0, objectId, 0)
def ObjectAddObjectClass(builder, objectClass): builder.PrependUint8Slot(1, objectClass, 0)
def ObjectAddObjectType(builder, objectType): builder.PrependUint32Slot(2, objectType, 0)
def ObjectAddObjectTypeName(builder, objectTypeName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(objectTypeName), 0)
def ObjectAddPos(builder, pos): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def ObjectAddHp(builder, hp): builder.PrependFloat32Slot(5, hp, 0.0)
def ObjectAddMaxHp(builder, maxHp): builder.PrependFloat32Slot(6, maxHp, 0.0)
def ObjectAddResourceType(builder, resourceType): builder.PrependInt16Slot(7, resourceType, 0)
def ObjectAddResourceAmount(builder, resourceAmount): builder.PrependFloat32Slot(8, resourceAmount, 0.0)
def ObjectAddInfoType(builder, infoType): builder.PrependUint8Slot(9, infoType, 0)
def ObjectAddInfo(builder, info): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)
def ObjectEnd(builder): return builder.EndObject()
