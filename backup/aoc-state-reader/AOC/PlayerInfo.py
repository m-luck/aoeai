# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class PlayerInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlayerInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerInfo()
        x.Init(buf, n + offset)
        return x

    # PlayerInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerInfo
    def PlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # PlayerInfo
    def PlayerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PlayerInfo
    def PlayerState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PlayerInfo
    def Food(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Wood(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Stone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Gold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Headroom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Population(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def PopulationCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def CivilianPopulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def MilitaryPopulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def PercentMapExplored(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlayerInfo
    def Techs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Tech import Tech
            obj = Tech()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerInfo
    def TechsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PlayerInfoStart(builder): builder.StartObject(14)
def PlayerInfoAddPlayerId(builder, playerId): builder.PrependUint8Slot(0, playerId, 0)
def PlayerInfoAddPlayerName(builder, playerName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(playerName), 0)
def PlayerInfoAddPlayerState(builder, playerState): builder.PrependInt8Slot(2, playerState, 0)
def PlayerInfoAddFood(builder, food): builder.PrependFloat32Slot(3, food, 0.0)
def PlayerInfoAddWood(builder, wood): builder.PrependFloat32Slot(4, wood, 0.0)
def PlayerInfoAddStone(builder, stone): builder.PrependFloat32Slot(5, stone, 0.0)
def PlayerInfoAddGold(builder, gold): builder.PrependFloat32Slot(6, gold, 0.0)
def PlayerInfoAddHeadroom(builder, headroom): builder.PrependFloat32Slot(7, headroom, 0.0)
def PlayerInfoAddPopulation(builder, population): builder.PrependFloat32Slot(8, population, 0.0)
def PlayerInfoAddPopulationCap(builder, populationCap): builder.PrependFloat32Slot(9, populationCap, 0.0)
def PlayerInfoAddCivilianPopulation(builder, civilianPopulation): builder.PrependFloat32Slot(10, civilianPopulation, 0.0)
def PlayerInfoAddMilitaryPopulation(builder, militaryPopulation): builder.PrependFloat32Slot(11, militaryPopulation, 0.0)
def PlayerInfoAddPercentMapExplored(builder, percentMapExplored): builder.PrependFloat32Slot(12, percentMapExplored, 0.0)
def PlayerInfoAddTechs(builder, techs): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(techs), 0)
def PlayerInfoStartTechsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlayerInfoEnd(builder): return builder.EndObject()
