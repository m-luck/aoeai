# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class Tech(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTech(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tech()
        x.Init(buf, n + offset)
        return x

    # Tech
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tech
    def TechIdIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Tech
    def TechIdGame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Tech
    def TechState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Tech
    def TimePassed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def TechStart(builder): builder.StartObject(4)
def TechAddTechIdIndex(builder, techIdIndex): builder.PrependInt16Slot(0, techIdIndex, 0)
def TechAddTechIdGame(builder, techIdGame): builder.PrependInt16Slot(1, techIdGame, 0)
def TechAddTechState(builder, techState): builder.PrependInt16Slot(2, techState, 0)
def TechAddTimePassed(builder, timePassed): builder.PrependFloat32Slot(3, timePassed, 0.0)
def TechEnd(builder): return builder.EndObject()
