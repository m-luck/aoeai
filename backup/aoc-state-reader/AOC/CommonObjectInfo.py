# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class CommonObjectInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCommonObjectInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommonObjectInfo()
        x.Init(buf, n + offset)
        return x

    # CommonObjectInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommonObjectInfo
    def ObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CommonObjectInfo
    def ObjectClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CommonObjectInfo
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # CommonObjectInfo
    def ObjectTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommonObjectInfo
    def ObjectState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CommonObjectInfo
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .Pos import Pos
            obj = Pos()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CommonObjectInfo
    def Hp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommonObjectInfo
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommonObjectInfo
    def ResourceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # CommonObjectInfo
    def ResourceAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def CommonObjectInfoStart(builder): builder.StartObject(10)
def CommonObjectInfoAddObjectId(builder, objectId): builder.PrependInt32Slot(0, objectId, 0)
def CommonObjectInfoAddObjectClass(builder, objectClass): builder.PrependUint8Slot(1, objectClass, 0)
def CommonObjectInfoAddObjectType(builder, objectType): builder.PrependInt16Slot(2, objectType, 0)
def CommonObjectInfoAddObjectTypeName(builder, objectTypeName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(objectTypeName), 0)
def CommonObjectInfoAddObjectState(builder, objectState): builder.PrependInt8Slot(4, objectState, 0)
def CommonObjectInfoAddPos(builder, pos): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def CommonObjectInfoAddHp(builder, hp): builder.PrependFloat32Slot(6, hp, 0.0)
def CommonObjectInfoAddMaxHp(builder, maxHp): builder.PrependFloat32Slot(7, maxHp, 0.0)
def CommonObjectInfoAddResourceType(builder, resourceType): builder.PrependInt16Slot(8, resourceType, 0)
def CommonObjectInfoAddResourceAmount(builder, resourceAmount): builder.PrependFloat32Slot(9, resourceAmount, 0.0)
def CommonObjectInfoEnd(builder): return builder.EndObject()
