# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class PlayerObjects(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlayerObjects(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlayerObjects()
        x.Init(buf, n + offset)
        return x

    # PlayerObjects
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlayerObjects
    def PlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # PlayerObjects
    def Buildings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Building import Building
            obj = Building()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerObjects
    def BuildingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlayerObjects
    def Units(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Unit import Unit
            obj = Unit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerObjects
    def UnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlayerObjects
    def MapObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MapObject import MapObject
            obj = MapObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlayerObjects
    def MapObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PlayerObjectsStart(builder): builder.StartObject(4)
def PlayerObjectsAddPlayerId(builder, playerId): builder.PrependUint8Slot(0, playerId, 0)
def PlayerObjectsAddBuildings(builder, buildings): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buildings), 0)
def PlayerObjectsStartBuildingsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlayerObjectsAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def PlayerObjectsStartUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlayerObjectsAddMapObjects(builder, mapObjects): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mapObjects), 0)
def PlayerObjectsStartMapObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlayerObjectsEnd(builder): return builder.EndObject()
