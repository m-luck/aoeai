# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AOC

import flatbuffers

class Building(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBuilding(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Building()
        x.Init(buf, n + offset)
        return x

    # Building
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Building
    def Common(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .CommonObjectInfo import CommonObjectInfo
            obj = CommonObjectInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Building
    def ResearchingTechId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Building
    def Queue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from .UnitQueue import UnitQueue
            obj = UnitQueue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Building
    def QueueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Building
    def Training(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .UnitTraining import UnitTraining
            obj = UnitTraining()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BuildingStart(builder): builder.StartObject(4)
def BuildingAddCommon(builder, common): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(common), 0)
def BuildingAddResearchingTechId(builder, researchingTechId): builder.PrependInt16Slot(1, researchingTechId, 0)
def BuildingAddQueue(builder, queue): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(queue), 0)
def BuildingStartQueueVector(builder, numElems): return builder.StartVector(4, numElems, 2)
def BuildingAddTraining(builder, training): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(training), 0)
def BuildingEnd(builder): return builder.EndObject()
